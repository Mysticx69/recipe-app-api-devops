# name: "Test and Lint Terraform"

# on:
#   push:
#     branches:
#       - "main"
#   pull_request:
#     branches:
#       - "main"

# jobs:
#   validate-terraform:
#     name: "Test and lint terraform code"
#     runs-on: ubuntu-latest
#     if: github.event_name == 'pull_request'
#     # defaults:
#     #   run:
#     #     working-directory: deploy
#     steps:
#       - name: Checkout the code
#         uses: actions/checkout@v3

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-region: eu-west-3
#           role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
#           role-session-name: OIDCSession

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

#       - name: Terraform Format
#         id: fmt
#         run: terraform fmt -check

#       - name: Terraform Init
#         id: init
#         run: terraform init

#       - name: Terraform Validate
#         id: validate
#         run: terraform validate

#       - name: Terraform Plan
#         id: plan
#         run: terraform plan -no-color -input=false
#         continue-on-error: true

#       - name: Update Pull Request
#         uses: actions/github-script@v6

#         env:
#           PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#             #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
#             #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#             #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
#             <details><summary>Show Plan</summary>
#             \`\`\`\n
#             ${process.env.PLAN}
#             \`\`\`
#             </details>
#             *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
#             github.rest.issues.createComment({
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: output
#             })
#       - name: Terraform Plan Status
#         if: steps.plan.outcome == 'failure'
#         run: exit 1

name: "Proxy Build"

on:
  push:
    branches:
      - "main"
  pull_request:

permissions:
  id-token: write

jobs:
  build-push-docker-dev:
    name: "Build image and push to dev"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: eu-west-3
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: OIDCSession

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # - name: Build, tag, and push docker image to Amazon ECR
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: recipe-app-api-proxy
      #     IMAGE_TAG: ${{ github.sha }}
      #   run: |
      #     docker build -t  $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #     docker push  $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #     docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
      #     docker push  $ECR_REGISTRY/$ECR_REPOSITORY:latest
